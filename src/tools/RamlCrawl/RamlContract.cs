using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace RamlCrawl
{
    public class RamlContract
    {
        public string BasePath { get; set; }
        public string Name { get; set; }
        public IReadOnlyDictionary<string, string> Parameters { get; private set; }

        public string RamlFile => Path.Combine(BasePath, $"{Name}.raml");

        public string ApiModelTemplatePath => Path.Combine(BasePath, "Templates", "ApiModel.t4");

        public string ApiControllerBaseTemplatePath => Path.Combine(BasePath, "Templates", "ApiControllerBase.t4");

        public string ApiControllerImplementationTemplatePath => Path.Combine(BasePath, "Templates", "ApiControllerImplementation.t4");

        public string ApiControllerInterfaceTemplatePath => Path.Combine(BasePath, "Templates", "ApiControllerInterface.t4");

        public string ApiEnumTemplatePath => Path.Combine(BasePath, "Templates", "ApiEnum.t4");

        public string ApiClientTemplatePath => Path.GetFullPath(Path.Combine(BasePath, @"..\", "Templates", "RAMLClient.t4"));

        public string ApiModelDestinationPath => Parameters.ContainsKey("modelsFolder")
            ? Path.GetFullPath(Path.Combine(BasePath, @"..\", Parameters["modelsFolder"]))
            : Path.Combine(BasePath, Name);

        public string ApiControllerImplementationDestinationPath =>
            Parameters.ContainsKey("implementationControllersFolder")
                ? Path.GetFullPath(Path.Combine(BasePath, @"..\", Parameters["implementationControllersFolder"]))
                : Path.GetFullPath(Path.Combine(BasePath, @"..\", "Controllers"));

        public string ApiControllerBaseDestinationPath => Path.Combine(BasePath, Name);
        
        public string ApiControllerEnumDestinationPath => Path.Combine(BasePath, Name);

        public string ApiControllerInterfaceDestinationPath => Path.Combine(BasePath, Name);

        public string ModelsNamespace => $"{Parameters["namespace"]}.Models";

        public string Namespace => $"{Parameters["namespace"]}";

        public string RootClassName => $"{Parameters["client"]}";

        public bool IsClient => File.Exists(ApiClientTemplatePath);

        public RamlContract LoadRefFile()
        {
            var _ =
                TryLoadRefFile(Path.Combine(BasePath, Name, $"{Name}.ref")) ||
                TryLoadRefFile(Path.Combine(BasePath, $"{Name}.ref"));

            return this;
        }

        private bool TryLoadRefFile(string refFilePath)
        {
            if (!File.Exists(refFilePath)) return false;

            Parameters = File
                .ReadAllLines(refFilePath)
                .Where(x => x.Contains(":"))
                .ToDictionary(
                    x => x.Substring(0, x.IndexOf(":", StringComparison.OrdinalIgnoreCase)).Trim(),
                    x => x.Substring(x.IndexOf(":", StringComparison.OrdinalIgnoreCase) + 1).Trim());

            return true;
        }

        public static ICollection<RamlContract> LoadAll(string path = ".") =>
            Directory
                .GetFiles(".", "*.raml", SearchOption.AllDirectories)
                .Select(Path.GetFullPath)
                .Select(p => new RamlContract
                {
                    BasePath = Path.GetDirectoryName(p),
                    Name = Path.GetFileNameWithoutExtension(p)
                }.LoadRefFile())
                .Where(x => x.Parameters != null)
                .ToList();

        public void ClearAutogeneratedFolder()
        {
            foreach (var file in Directory.GetFiles(BasePath, "*.cs", SearchOption.AllDirectories))
            {
                File.Delete(file);
            }
        }
    }
}